//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace RequisitionValidation.WorkflowServiceWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WorkflowServiceHttpBinding", Namespace="webservices.services.weaver.com.cn")]
    public partial class WorkflowService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback deleteRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback submitWorkflowRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback getToDoWorkflowRequestCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback doCreateWorkflowRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCreateWorkflowRequestInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllWorkflowRequestListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMyWorkflowRequestListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getWorkflowRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback forward2WorkflowRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProcessedWorkflowRequestCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLeaveDaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback getWorkflowRequest4splitOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHendledWorkflowRequestListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCreateWorkflowCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getToDoWorkflowRequestListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getWorkflowNewFlagOperationCompleted;
        
        private System.Threading.SendOrPostCallback givingOpinionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCCWorkflowRequestListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCreateWorkflowListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getWorkflowRequestLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCCWorkflowRequestCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllWorkflowRequestCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMyWorkflowRequestCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProcessedWorkflowRequestListOperationCompleted;
        
        private System.Threading.SendOrPostCallback doForceOverOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCreateWorkflowTypeCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback forwardWorkflowRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback writeWorkflowReadFlagOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHendledWorkflowRequestCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCreateWorkflowTypeListOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WorkflowService() {
            this.Url = global::RequisitionValidation.Properties.Settings.Default.RequisitionValidation_WorkflowServiceWebReference_WorkflowService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event deleteRequestCompletedEventHandler deleteRequestCompleted;
        
        /// <remarks/>
        public event submitWorkflowRequestCompletedEventHandler submitWorkflowRequestCompleted;
        
        /// <remarks/>
        public event getToDoWorkflowRequestCountCompletedEventHandler getToDoWorkflowRequestCountCompleted;
        
        /// <remarks/>
        public event getUserIdCompletedEventHandler getUserIdCompleted;
        
        /// <remarks/>
        public event doCreateWorkflowRequestCompletedEventHandler doCreateWorkflowRequestCompleted;
        
        /// <remarks/>
        public event getCreateWorkflowRequestInfoCompletedEventHandler getCreateWorkflowRequestInfoCompleted;
        
        /// <remarks/>
        public event getAllWorkflowRequestListCompletedEventHandler getAllWorkflowRequestListCompleted;
        
        /// <remarks/>
        public event getMyWorkflowRequestListCompletedEventHandler getMyWorkflowRequestListCompleted;
        
        /// <remarks/>
        public event getWorkflowRequestCompletedEventHandler getWorkflowRequestCompleted;
        
        /// <remarks/>
        public event forward2WorkflowRequestCompletedEventHandler forward2WorkflowRequestCompleted;
        
        /// <remarks/>
        public event getProcessedWorkflowRequestCountCompletedEventHandler getProcessedWorkflowRequestCountCompleted;
        
        /// <remarks/>
        public event getLeaveDaysCompletedEventHandler getLeaveDaysCompleted;
        
        /// <remarks/>
        public event getWorkflowRequest4splitCompletedEventHandler getWorkflowRequest4splitCompleted;
        
        /// <remarks/>
        public event getHendledWorkflowRequestListCompletedEventHandler getHendledWorkflowRequestListCompleted;
        
        /// <remarks/>
        public event getCreateWorkflowCountCompletedEventHandler getCreateWorkflowCountCompleted;
        
        /// <remarks/>
        public event getToDoWorkflowRequestListCompletedEventHandler getToDoWorkflowRequestListCompleted;
        
        /// <remarks/>
        public event getWorkflowNewFlagCompletedEventHandler getWorkflowNewFlagCompleted;
        
        /// <remarks/>
        public event givingOpinionsCompletedEventHandler givingOpinionsCompleted;
        
        /// <remarks/>
        public event getCCWorkflowRequestListCompletedEventHandler getCCWorkflowRequestListCompleted;
        
        /// <remarks/>
        public event getCreateWorkflowListCompletedEventHandler getCreateWorkflowListCompleted;
        
        /// <remarks/>
        public event getWorkflowRequestLogsCompletedEventHandler getWorkflowRequestLogsCompleted;
        
        /// <remarks/>
        public event getCCWorkflowRequestCountCompletedEventHandler getCCWorkflowRequestCountCompleted;
        
        /// <remarks/>
        public event getAllWorkflowRequestCountCompletedEventHandler getAllWorkflowRequestCountCompleted;
        
        /// <remarks/>
        public event getMyWorkflowRequestCountCompletedEventHandler getMyWorkflowRequestCountCompleted;
        
        /// <remarks/>
        public event getProcessedWorkflowRequestListCompletedEventHandler getProcessedWorkflowRequestListCompleted;
        
        /// <remarks/>
        public event doForceOverCompletedEventHandler doForceOverCompleted;
        
        /// <remarks/>
        public event getCreateWorkflowTypeCountCompletedEventHandler getCreateWorkflowTypeCountCompleted;
        
        /// <remarks/>
        public event forwardWorkflowRequestCompletedEventHandler forwardWorkflowRequestCompleted;
        
        /// <remarks/>
        public event writeWorkflowReadFlagCompletedEventHandler writeWorkflowReadFlagCompleted;
        
        /// <remarks/>
        public event getHendledWorkflowRequestCountCompletedEventHandler getHendledWorkflowRequestCountCompleted;
        
        /// <remarks/>
        public event getCreateWorkflowTypeListCompletedEventHandler getCreateWorkflowTypeListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.deleteRequest", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public bool deleteRequest(int in0, int in1) {
            object[] results = this.Invoke("deleteRequest", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deleteRequestAsync(int in0, int in1) {
            this.deleteRequestAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void deleteRequestAsync(int in0, int in1, object userState) {
            if ((this.deleteRequestOperationCompleted == null)) {
                this.deleteRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteRequestOperationCompleted);
            }
            this.InvokeAsync("deleteRequest", new object[] {
                        in0,
                        in1}, this.deleteRequestOperationCompleted, userState);
        }
        
        private void OndeleteRequestOperationCompleted(object arg) {
            if ((this.deleteRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteRequestCompleted(this, new deleteRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.submitWorkflowRequest", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string submitWorkflowRequest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] WorkflowRequestInfo in0, int in1, int in2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in3, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in4) {
            object[] results = this.Invoke("submitWorkflowRequest", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void submitWorkflowRequestAsync(WorkflowRequestInfo in0, int in1, int in2, string in3, string in4) {
            this.submitWorkflowRequestAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void submitWorkflowRequestAsync(WorkflowRequestInfo in0, int in1, int in2, string in3, string in4, object userState) {
            if ((this.submitWorkflowRequestOperationCompleted == null)) {
                this.submitWorkflowRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsubmitWorkflowRequestOperationCompleted);
            }
            this.InvokeAsync("submitWorkflowRequest", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.submitWorkflowRequestOperationCompleted, userState);
        }
        
        private void OnsubmitWorkflowRequestOperationCompleted(object arg) {
            if ((this.submitWorkflowRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.submitWorkflowRequestCompleted(this, new submitWorkflowRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getToDoWorkflowRequestCount", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public int getToDoWorkflowRequestCount(int in0, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in1) {
            object[] results = this.Invoke("getToDoWorkflowRequestCount", new object[] {
                        in0,
                        in1});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getToDoWorkflowRequestCountAsync(int in0, string[] in1) {
            this.getToDoWorkflowRequestCountAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getToDoWorkflowRequestCountAsync(int in0, string[] in1, object userState) {
            if ((this.getToDoWorkflowRequestCountOperationCompleted == null)) {
                this.getToDoWorkflowRequestCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetToDoWorkflowRequestCountOperationCompleted);
            }
            this.InvokeAsync("getToDoWorkflowRequestCount", new object[] {
                        in0,
                        in1}, this.getToDoWorkflowRequestCountOperationCompleted, userState);
        }
        
        private void OngetToDoWorkflowRequestCountOperationCompleted(object arg) {
            if ((this.getToDoWorkflowRequestCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getToDoWorkflowRequestCountCompleted(this, new getToDoWorkflowRequestCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getUserid", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getUserId([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in1) {
            object[] results = this.Invoke("getUserId", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserIdAsync(string in0, string in1) {
            this.getUserIdAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getUserIdAsync(string in0, string in1, object userState) {
            if ((this.getUserIdOperationCompleted == null)) {
                this.getUserIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserIdOperationCompleted);
            }
            this.InvokeAsync("getUserId", new object[] {
                        in0,
                        in1}, this.getUserIdOperationCompleted, userState);
        }
        
        private void OngetUserIdOperationCompleted(object arg) {
            if ((this.getUserIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserIdCompleted(this, new getUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.doCreateWorkflowRequest", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string doCreateWorkflowRequest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] WorkflowRequestInfo in0, int in1) {
            object[] results = this.Invoke("doCreateWorkflowRequest", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void doCreateWorkflowRequestAsync(WorkflowRequestInfo in0, int in1) {
            this.doCreateWorkflowRequestAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void doCreateWorkflowRequestAsync(WorkflowRequestInfo in0, int in1, object userState) {
            if ((this.doCreateWorkflowRequestOperationCompleted == null)) {
                this.doCreateWorkflowRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoCreateWorkflowRequestOperationCompleted);
            }
            this.InvokeAsync("doCreateWorkflowRequest", new object[] {
                        in0,
                        in1}, this.doCreateWorkflowRequestOperationCompleted, userState);
        }
        
        private void OndoCreateWorkflowRequestOperationCompleted(object arg) {
            if ((this.doCreateWorkflowRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doCreateWorkflowRequestCompleted(this, new doCreateWorkflowRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowRequestInfo", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public WorkflowRequestInfo getCreateWorkflowRequestInfo(int in0, int in1) {
            object[] results = this.Invoke("getCreateWorkflowRequestInfo", new object[] {
                        in0,
                        in1});
            return ((WorkflowRequestInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getCreateWorkflowRequestInfoAsync(int in0, int in1) {
            this.getCreateWorkflowRequestInfoAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getCreateWorkflowRequestInfoAsync(int in0, int in1, object userState) {
            if ((this.getCreateWorkflowRequestInfoOperationCompleted == null)) {
                this.getCreateWorkflowRequestInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCreateWorkflowRequestInfoOperationCompleted);
            }
            this.InvokeAsync("getCreateWorkflowRequestInfo", new object[] {
                        in0,
                        in1}, this.getCreateWorkflowRequestInfoOperationCompleted, userState);
        }
        
        private void OngetCreateWorkflowRequestInfoOperationCompleted(object arg) {
            if ((this.getCreateWorkflowRequestInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCreateWorkflowRequestInfoCompleted(this, new getCreateWorkflowRequestInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getAllWorkflowRequestList", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://webservices.workflow.weaver")]
        public WorkflowRequestInfo[] getAllWorkflowRequestList(int in0, int in1, int in2, int in3, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in4) {
            object[] results = this.Invoke("getAllWorkflowRequestList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((WorkflowRequestInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void getAllWorkflowRequestListAsync(int in0, int in1, int in2, int in3, string[] in4) {
            this.getAllWorkflowRequestListAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void getAllWorkflowRequestListAsync(int in0, int in1, int in2, int in3, string[] in4, object userState) {
            if ((this.getAllWorkflowRequestListOperationCompleted == null)) {
                this.getAllWorkflowRequestListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllWorkflowRequestListOperationCompleted);
            }
            this.InvokeAsync("getAllWorkflowRequestList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.getAllWorkflowRequestListOperationCompleted, userState);
        }
        
        private void OngetAllWorkflowRequestListOperationCompleted(object arg) {
            if ((this.getAllWorkflowRequestListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllWorkflowRequestListCompleted(this, new getAllWorkflowRequestListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getMyWorkflowRequestList", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://webservices.workflow.weaver")]
        public WorkflowRequestInfo[] getMyWorkflowRequestList(int in0, int in1, int in2, int in3, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in4) {
            object[] results = this.Invoke("getMyWorkflowRequestList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((WorkflowRequestInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void getMyWorkflowRequestListAsync(int in0, int in1, int in2, int in3, string[] in4) {
            this.getMyWorkflowRequestListAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void getMyWorkflowRequestListAsync(int in0, int in1, int in2, int in3, string[] in4, object userState) {
            if ((this.getMyWorkflowRequestListOperationCompleted == null)) {
                this.getMyWorkflowRequestListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMyWorkflowRequestListOperationCompleted);
            }
            this.InvokeAsync("getMyWorkflowRequestList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.getMyWorkflowRequestListOperationCompleted, userState);
        }
        
        private void OngetMyWorkflowRequestListOperationCompleted(object arg) {
            if ((this.getMyWorkflowRequestListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMyWorkflowRequestListCompleted(this, new getMyWorkflowRequestListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getWorkflowRequest", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public WorkflowRequestInfo getWorkflowRequest(int in0, int in1, int in2) {
            object[] results = this.Invoke("getWorkflowRequest", new object[] {
                        in0,
                        in1,
                        in2});
            return ((WorkflowRequestInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getWorkflowRequestAsync(int in0, int in1, int in2) {
            this.getWorkflowRequestAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void getWorkflowRequestAsync(int in0, int in1, int in2, object userState) {
            if ((this.getWorkflowRequestOperationCompleted == null)) {
                this.getWorkflowRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetWorkflowRequestOperationCompleted);
            }
            this.InvokeAsync("getWorkflowRequest", new object[] {
                        in0,
                        in1,
                        in2}, this.getWorkflowRequestOperationCompleted, userState);
        }
        
        private void OngetWorkflowRequestOperationCompleted(object arg) {
            if ((this.getWorkflowRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getWorkflowRequestCompleted(this, new getWorkflowRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.forward2WorkflowRequest", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string forward2WorkflowRequest(int in0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in2, int in3, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in4) {
            object[] results = this.Invoke("forward2WorkflowRequest", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void forward2WorkflowRequestAsync(int in0, string in1, string in2, int in3, string in4) {
            this.forward2WorkflowRequestAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void forward2WorkflowRequestAsync(int in0, string in1, string in2, int in3, string in4, object userState) {
            if ((this.forward2WorkflowRequestOperationCompleted == null)) {
                this.forward2WorkflowRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.Onforward2WorkflowRequestOperationCompleted);
            }
            this.InvokeAsync("forward2WorkflowRequest", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.forward2WorkflowRequestOperationCompleted, userState);
        }
        
        private void Onforward2WorkflowRequestOperationCompleted(object arg) {
            if ((this.forward2WorkflowRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.forward2WorkflowRequestCompleted(this, new forward2WorkflowRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getProcessedWorkflowRequestCount", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public int getProcessedWorkflowRequestCount(int in0, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in1) {
            object[] results = this.Invoke("getProcessedWorkflowRequestCount", new object[] {
                        in0,
                        in1});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getProcessedWorkflowRequestCountAsync(int in0, string[] in1) {
            this.getProcessedWorkflowRequestCountAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getProcessedWorkflowRequestCountAsync(int in0, string[] in1, object userState) {
            if ((this.getProcessedWorkflowRequestCountOperationCompleted == null)) {
                this.getProcessedWorkflowRequestCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProcessedWorkflowRequestCountOperationCompleted);
            }
            this.InvokeAsync("getProcessedWorkflowRequestCount", new object[] {
                        in0,
                        in1}, this.getProcessedWorkflowRequestCountOperationCompleted, userState);
        }
        
        private void OngetProcessedWorkflowRequestCountOperationCompleted(object arg) {
            if ((this.getProcessedWorkflowRequestCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProcessedWorkflowRequestCountCompleted(this, new getProcessedWorkflowRequestCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getLeaveDays", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getLeaveDays([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in3, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in4) {
            object[] results = this.Invoke("getLeaveDays", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getLeaveDaysAsync(string in0, string in1, string in2, string in3, string in4) {
            this.getLeaveDaysAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void getLeaveDaysAsync(string in0, string in1, string in2, string in3, string in4, object userState) {
            if ((this.getLeaveDaysOperationCompleted == null)) {
                this.getLeaveDaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLeaveDaysOperationCompleted);
            }
            this.InvokeAsync("getLeaveDays", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.getLeaveDaysOperationCompleted, userState);
        }
        
        private void OngetLeaveDaysOperationCompleted(object arg) {
            if ((this.getLeaveDaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLeaveDaysCompleted(this, new getLeaveDaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getWorkflowRequest4split", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public WorkflowRequestInfo getWorkflowRequest4split(int in0, int in1, int in2, int in3) {
            object[] results = this.Invoke("getWorkflowRequest4split", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((WorkflowRequestInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getWorkflowRequest4splitAsync(int in0, int in1, int in2, int in3) {
            this.getWorkflowRequest4splitAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void getWorkflowRequest4splitAsync(int in0, int in1, int in2, int in3, object userState) {
            if ((this.getWorkflowRequest4splitOperationCompleted == null)) {
                this.getWorkflowRequest4splitOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetWorkflowRequest4splitOperationCompleted);
            }
            this.InvokeAsync("getWorkflowRequest4split", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.getWorkflowRequest4splitOperationCompleted, userState);
        }
        
        private void OngetWorkflowRequest4splitOperationCompleted(object arg) {
            if ((this.getWorkflowRequest4splitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getWorkflowRequest4splitCompleted(this, new getWorkflowRequest4splitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getHendledWorkflowRequestList", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://webservices.workflow.weaver")]
        public WorkflowRequestInfo[] getHendledWorkflowRequestList(int in0, int in1, int in2, int in3, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in4) {
            object[] results = this.Invoke("getHendledWorkflowRequestList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((WorkflowRequestInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void getHendledWorkflowRequestListAsync(int in0, int in1, int in2, int in3, string[] in4) {
            this.getHendledWorkflowRequestListAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void getHendledWorkflowRequestListAsync(int in0, int in1, int in2, int in3, string[] in4, object userState) {
            if ((this.getHendledWorkflowRequestListOperationCompleted == null)) {
                this.getHendledWorkflowRequestListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHendledWorkflowRequestListOperationCompleted);
            }
            this.InvokeAsync("getHendledWorkflowRequestList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.getHendledWorkflowRequestListOperationCompleted, userState);
        }
        
        private void OngetHendledWorkflowRequestListOperationCompleted(object arg) {
            if ((this.getHendledWorkflowRequestListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHendledWorkflowRequestListCompleted(this, new getHendledWorkflowRequestListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowCount", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public int getCreateWorkflowCount(int in0, int in1, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in2) {
            object[] results = this.Invoke("getCreateWorkflowCount", new object[] {
                        in0,
                        in1,
                        in2});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getCreateWorkflowCountAsync(int in0, int in1, string[] in2) {
            this.getCreateWorkflowCountAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void getCreateWorkflowCountAsync(int in0, int in1, string[] in2, object userState) {
            if ((this.getCreateWorkflowCountOperationCompleted == null)) {
                this.getCreateWorkflowCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCreateWorkflowCountOperationCompleted);
            }
            this.InvokeAsync("getCreateWorkflowCount", new object[] {
                        in0,
                        in1,
                        in2}, this.getCreateWorkflowCountOperationCompleted, userState);
        }
        
        private void OngetCreateWorkflowCountOperationCompleted(object arg) {
            if ((this.getCreateWorkflowCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCreateWorkflowCountCompleted(this, new getCreateWorkflowCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getToDoWorkflowRequestList", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://webservices.workflow.weaver")]
        public WorkflowRequestInfo[] getToDoWorkflowRequestList(int in0, int in1, int in2, int in3, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in4) {
            object[] results = this.Invoke("getToDoWorkflowRequestList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((WorkflowRequestInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void getToDoWorkflowRequestListAsync(int in0, int in1, int in2, int in3, string[] in4) {
            this.getToDoWorkflowRequestListAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void getToDoWorkflowRequestListAsync(int in0, int in1, int in2, int in3, string[] in4, object userState) {
            if ((this.getToDoWorkflowRequestListOperationCompleted == null)) {
                this.getToDoWorkflowRequestListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetToDoWorkflowRequestListOperationCompleted);
            }
            this.InvokeAsync("getToDoWorkflowRequestList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.getToDoWorkflowRequestListOperationCompleted, userState);
        }
        
        private void OngetToDoWorkflowRequestListOperationCompleted(object arg) {
            if ((this.getToDoWorkflowRequestListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getToDoWorkflowRequestListCompleted(this, new getToDoWorkflowRequestListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getWorkflowNewFlag", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        public string[] getWorkflowNewFlag([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in1) {
            object[] results = this.Invoke("getWorkflowNewFlag", new object[] {
                        in0,
                        in1});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getWorkflowNewFlagAsync(string[] in0, string in1) {
            this.getWorkflowNewFlagAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getWorkflowNewFlagAsync(string[] in0, string in1, object userState) {
            if ((this.getWorkflowNewFlagOperationCompleted == null)) {
                this.getWorkflowNewFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetWorkflowNewFlagOperationCompleted);
            }
            this.InvokeAsync("getWorkflowNewFlag", new object[] {
                        in0,
                        in1}, this.getWorkflowNewFlagOperationCompleted, userState);
        }
        
        private void OngetWorkflowNewFlagOperationCompleted(object arg) {
            if ((this.getWorkflowNewFlagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getWorkflowNewFlagCompleted(this, new getWorkflowNewFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.givingOpinions", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string givingOpinions(int in0, int in1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in2) {
            object[] results = this.Invoke("givingOpinions", new object[] {
                        in0,
                        in1,
                        in2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void givingOpinionsAsync(int in0, int in1, string in2) {
            this.givingOpinionsAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void givingOpinionsAsync(int in0, int in1, string in2, object userState) {
            if ((this.givingOpinionsOperationCompleted == null)) {
                this.givingOpinionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngivingOpinionsOperationCompleted);
            }
            this.InvokeAsync("givingOpinions", new object[] {
                        in0,
                        in1,
                        in2}, this.givingOpinionsOperationCompleted, userState);
        }
        
        private void OngivingOpinionsOperationCompleted(object arg) {
            if ((this.givingOpinionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.givingOpinionsCompleted(this, new givingOpinionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getCCWorkflowRequestList", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://webservices.workflow.weaver")]
        public WorkflowRequestInfo[] getCCWorkflowRequestList(int in0, int in1, int in2, int in3, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in4) {
            object[] results = this.Invoke("getCCWorkflowRequestList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((WorkflowRequestInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void getCCWorkflowRequestListAsync(int in0, int in1, int in2, int in3, string[] in4) {
            this.getCCWorkflowRequestListAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void getCCWorkflowRequestListAsync(int in0, int in1, int in2, int in3, string[] in4, object userState) {
            if ((this.getCCWorkflowRequestListOperationCompleted == null)) {
                this.getCCWorkflowRequestListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCCWorkflowRequestListOperationCompleted);
            }
            this.InvokeAsync("getCCWorkflowRequestList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.getCCWorkflowRequestListOperationCompleted, userState);
        }
        
        private void OngetCCWorkflowRequestListOperationCompleted(object arg) {
            if ((this.getCCWorkflowRequestListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCCWorkflowRequestListCompleted(this, new getCCWorkflowRequestListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowList", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://webservices.workflow.weaver")]
        public WorkflowBaseInfo[] getCreateWorkflowList(int in0, int in1, int in2, int in3, int in4, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in5) {
            object[] results = this.Invoke("getCreateWorkflowList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4,
                        in5});
            return ((WorkflowBaseInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void getCreateWorkflowListAsync(int in0, int in1, int in2, int in3, int in4, string[] in5) {
            this.getCreateWorkflowListAsync(in0, in1, in2, in3, in4, in5, null);
        }
        
        /// <remarks/>
        public void getCreateWorkflowListAsync(int in0, int in1, int in2, int in3, int in4, string[] in5, object userState) {
            if ((this.getCreateWorkflowListOperationCompleted == null)) {
                this.getCreateWorkflowListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCreateWorkflowListOperationCompleted);
            }
            this.InvokeAsync("getCreateWorkflowList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4,
                        in5}, this.getCreateWorkflowListOperationCompleted, userState);
        }
        
        private void OngetCreateWorkflowListOperationCompleted(object arg) {
            if ((this.getCreateWorkflowListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCreateWorkflowListCompleted(this, new getCreateWorkflowListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getWorkflowRequestLogs", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://webservices.workflow.weaver")]
        public WorkflowRequestLog[] getWorkflowRequestLogs([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in1, int in2, int in3, int in4) {
            object[] results = this.Invoke("getWorkflowRequestLogs", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((WorkflowRequestLog[])(results[0]));
        }
        
        /// <remarks/>
        public void getWorkflowRequestLogsAsync(string in0, string in1, int in2, int in3, int in4) {
            this.getWorkflowRequestLogsAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void getWorkflowRequestLogsAsync(string in0, string in1, int in2, int in3, int in4, object userState) {
            if ((this.getWorkflowRequestLogsOperationCompleted == null)) {
                this.getWorkflowRequestLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetWorkflowRequestLogsOperationCompleted);
            }
            this.InvokeAsync("getWorkflowRequestLogs", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.getWorkflowRequestLogsOperationCompleted, userState);
        }
        
        private void OngetWorkflowRequestLogsOperationCompleted(object arg) {
            if ((this.getWorkflowRequestLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getWorkflowRequestLogsCompleted(this, new getWorkflowRequestLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getCCWorkflowRequestCount", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public int getCCWorkflowRequestCount(int in0, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in1) {
            object[] results = this.Invoke("getCCWorkflowRequestCount", new object[] {
                        in0,
                        in1});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getCCWorkflowRequestCountAsync(int in0, string[] in1) {
            this.getCCWorkflowRequestCountAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getCCWorkflowRequestCountAsync(int in0, string[] in1, object userState) {
            if ((this.getCCWorkflowRequestCountOperationCompleted == null)) {
                this.getCCWorkflowRequestCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCCWorkflowRequestCountOperationCompleted);
            }
            this.InvokeAsync("getCCWorkflowRequestCount", new object[] {
                        in0,
                        in1}, this.getCCWorkflowRequestCountOperationCompleted, userState);
        }
        
        private void OngetCCWorkflowRequestCountOperationCompleted(object arg) {
            if ((this.getCCWorkflowRequestCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCCWorkflowRequestCountCompleted(this, new getCCWorkflowRequestCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getAllWorkflowRequestCount", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public int getAllWorkflowRequestCount(int in0, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in1) {
            object[] results = this.Invoke("getAllWorkflowRequestCount", new object[] {
                        in0,
                        in1});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getAllWorkflowRequestCountAsync(int in0, string[] in1) {
            this.getAllWorkflowRequestCountAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getAllWorkflowRequestCountAsync(int in0, string[] in1, object userState) {
            if ((this.getAllWorkflowRequestCountOperationCompleted == null)) {
                this.getAllWorkflowRequestCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllWorkflowRequestCountOperationCompleted);
            }
            this.InvokeAsync("getAllWorkflowRequestCount", new object[] {
                        in0,
                        in1}, this.getAllWorkflowRequestCountOperationCompleted, userState);
        }
        
        private void OngetAllWorkflowRequestCountOperationCompleted(object arg) {
            if ((this.getAllWorkflowRequestCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllWorkflowRequestCountCompleted(this, new getAllWorkflowRequestCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getMyWorkflowRequestCount", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public int getMyWorkflowRequestCount(int in0, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in1) {
            object[] results = this.Invoke("getMyWorkflowRequestCount", new object[] {
                        in0,
                        in1});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getMyWorkflowRequestCountAsync(int in0, string[] in1) {
            this.getMyWorkflowRequestCountAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getMyWorkflowRequestCountAsync(int in0, string[] in1, object userState) {
            if ((this.getMyWorkflowRequestCountOperationCompleted == null)) {
                this.getMyWorkflowRequestCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMyWorkflowRequestCountOperationCompleted);
            }
            this.InvokeAsync("getMyWorkflowRequestCount", new object[] {
                        in0,
                        in1}, this.getMyWorkflowRequestCountOperationCompleted, userState);
        }
        
        private void OngetMyWorkflowRequestCountOperationCompleted(object arg) {
            if ((this.getMyWorkflowRequestCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMyWorkflowRequestCountCompleted(this, new getMyWorkflowRequestCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getProcessedWorkflowRequestList", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://webservices.workflow.weaver")]
        public WorkflowRequestInfo[] getProcessedWorkflowRequestList(int in0, int in1, int in2, int in3, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in4) {
            object[] results = this.Invoke("getProcessedWorkflowRequestList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((WorkflowRequestInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void getProcessedWorkflowRequestListAsync(int in0, int in1, int in2, int in3, string[] in4) {
            this.getProcessedWorkflowRequestListAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void getProcessedWorkflowRequestListAsync(int in0, int in1, int in2, int in3, string[] in4, object userState) {
            if ((this.getProcessedWorkflowRequestListOperationCompleted == null)) {
                this.getProcessedWorkflowRequestListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProcessedWorkflowRequestListOperationCompleted);
            }
            this.InvokeAsync("getProcessedWorkflowRequestList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.getProcessedWorkflowRequestListOperationCompleted, userState);
        }
        
        private void OngetProcessedWorkflowRequestListOperationCompleted(object arg) {
            if ((this.getProcessedWorkflowRequestListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProcessedWorkflowRequestListCompleted(this, new getProcessedWorkflowRequestListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.doForceOver", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string doForceOver(int in0, int in1) {
            object[] results = this.Invoke("doForceOver", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void doForceOverAsync(int in0, int in1) {
            this.doForceOverAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void doForceOverAsync(int in0, int in1, object userState) {
            if ((this.doForceOverOperationCompleted == null)) {
                this.doForceOverOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoForceOverOperationCompleted);
            }
            this.InvokeAsync("doForceOver", new object[] {
                        in0,
                        in1}, this.doForceOverOperationCompleted, userState);
        }
        
        private void OndoForceOverOperationCompleted(object arg) {
            if ((this.doForceOverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doForceOverCompleted(this, new doForceOverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowTypeCount", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public int getCreateWorkflowTypeCount(int in0, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in1) {
            object[] results = this.Invoke("getCreateWorkflowTypeCount", new object[] {
                        in0,
                        in1});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getCreateWorkflowTypeCountAsync(int in0, string[] in1) {
            this.getCreateWorkflowTypeCountAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getCreateWorkflowTypeCountAsync(int in0, string[] in1, object userState) {
            if ((this.getCreateWorkflowTypeCountOperationCompleted == null)) {
                this.getCreateWorkflowTypeCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCreateWorkflowTypeCountOperationCompleted);
            }
            this.InvokeAsync("getCreateWorkflowTypeCount", new object[] {
                        in0,
                        in1}, this.getCreateWorkflowTypeCountOperationCompleted, userState);
        }
        
        private void OngetCreateWorkflowTypeCountOperationCompleted(object arg) {
            if ((this.getCreateWorkflowTypeCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCreateWorkflowTypeCountCompleted(this, new getCreateWorkflowTypeCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.forwardWorkflowRequest", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string forwardWorkflowRequest(int in0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in2, int in3, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in4) {
            object[] results = this.Invoke("forwardWorkflowRequest", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void forwardWorkflowRequestAsync(int in0, string in1, string in2, int in3, string in4) {
            this.forwardWorkflowRequestAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void forwardWorkflowRequestAsync(int in0, string in1, string in2, int in3, string in4, object userState) {
            if ((this.forwardWorkflowRequestOperationCompleted == null)) {
                this.forwardWorkflowRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnforwardWorkflowRequestOperationCompleted);
            }
            this.InvokeAsync("forwardWorkflowRequest", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.forwardWorkflowRequestOperationCompleted, userState);
        }
        
        private void OnforwardWorkflowRequestOperationCompleted(object arg) {
            if ((this.forwardWorkflowRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.forwardWorkflowRequestCompleted(this, new forwardWorkflowRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.writeWorkflowReadFlag", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void writeWorkflowReadFlag([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in1) {
            this.Invoke("writeWorkflowReadFlag", new object[] {
                        in0,
                        in1});
        }
        
        /// <remarks/>
        public void writeWorkflowReadFlagAsync(string in0, string in1) {
            this.writeWorkflowReadFlagAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void writeWorkflowReadFlagAsync(string in0, string in1, object userState) {
            if ((this.writeWorkflowReadFlagOperationCompleted == null)) {
                this.writeWorkflowReadFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnwriteWorkflowReadFlagOperationCompleted);
            }
            this.InvokeAsync("writeWorkflowReadFlag", new object[] {
                        in0,
                        in1}, this.writeWorkflowReadFlagOperationCompleted, userState);
        }
        
        private void OnwriteWorkflowReadFlagOperationCompleted(object arg) {
            if ((this.writeWorkflowReadFlagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.writeWorkflowReadFlagCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getHendledWorkflowRequestCount", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public int getHendledWorkflowRequestCount(int in0, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in1) {
            object[] results = this.Invoke("getHendledWorkflowRequestCount", new object[] {
                        in0,
                        in1});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getHendledWorkflowRequestCountAsync(int in0, string[] in1) {
            this.getHendledWorkflowRequestCountAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getHendledWorkflowRequestCountAsync(int in0, string[] in1, object userState) {
            if ((this.getHendledWorkflowRequestCountOperationCompleted == null)) {
                this.getHendledWorkflowRequestCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHendledWorkflowRequestCountOperationCompleted);
            }
            this.InvokeAsync("getHendledWorkflowRequestCount", new object[] {
                        in0,
                        in1}, this.getHendledWorkflowRequestCountOperationCompleted, userState);
        }
        
        private void OngetHendledWorkflowRequestCountOperationCompleted(object arg) {
            if ((this.getHendledWorkflowRequestCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHendledWorkflowRequestCountCompleted(this, new getHendledWorkflowRequestCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowTypeList", RequestNamespace="webservices.services.weaver.com.cn", ResponseNamespace="webservices.services.weaver.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://webservices.workflow.weaver")]
        public WorkflowBaseInfo[] getCreateWorkflowTypeList(int in0, int in1, int in2, int in3, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] string[] in4) {
            object[] results = this.Invoke("getCreateWorkflowTypeList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((WorkflowBaseInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void getCreateWorkflowTypeListAsync(int in0, int in1, int in2, int in3, string[] in4) {
            this.getCreateWorkflowTypeListAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void getCreateWorkflowTypeListAsync(int in0, int in1, int in2, int in3, string[] in4, object userState) {
            if ((this.getCreateWorkflowTypeListOperationCompleted == null)) {
                this.getCreateWorkflowTypeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCreateWorkflowTypeListOperationCompleted);
            }
            this.InvokeAsync("getCreateWorkflowTypeList", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.getCreateWorkflowTypeListOperationCompleted, userState);
        }
        
        private void OngetCreateWorkflowTypeListOperationCompleted(object arg) {
            if ((this.getCreateWorkflowTypeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCreateWorkflowTypeListCompleted(this, new getCreateWorkflowTypeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.workflow.weaver")]
    public partial class WorkflowRequestInfo {
        
        private bool canEditField;
        
        private bool canEditFieldSpecified;
        
        private bool canViewField;
        
        private bool canViewFieldSpecified;
        
        private string createTimeField;
        
        private string creatorIdField;
        
        private string creatorNameField;
        
        private string currentNodeIdField;
        
        private string currentNodeNameField;
        
        private string forwardButtonNameField;
        
        private string isnextflowField;
        
        private string lastOperateTimeField;
        
        private string lastOperatorNameField;
        
        private string messageTypeField;
        
        private bool mustInputRemarkField;
        
        private bool mustInputRemarkFieldSpecified;
        
        private bool needAffirmanceField;
        
        private bool needAffirmanceFieldSpecified;
        
        private string receiveTimeField;
        
        private string rejectButtonNameField;
        
        private string remarkField;
        
        private string requestIdField;
        
        private string requestLevelField;
        
        private string requestNameField;
        
        private string statusField;
        
        private string subbackButtonNameField;
        
        private string submitButtonNameField;
        
        private string subnobackButtonNameField;
        
        private WorkflowBaseInfo workflowBaseInfoField;
        
        private WorkflowDetailTableInfo[] workflowDetailTableInfosField;
        
        private string[] workflowHtmlShowField;
        
        private string[] workflowHtmlTempleteField;
        
        private WorkflowMainTableInfo workflowMainTableInfoField;
        
        private string[][] workflowPhrasesField;
        
        private WorkflowRequestLog[] workflowRequestLogsField;
        
        /// <remarks/>
        public bool canEdit {
            get {
                return this.canEditField;
            }
            set {
                this.canEditField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool canEditSpecified {
            get {
                return this.canEditFieldSpecified;
            }
            set {
                this.canEditFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool canView {
            get {
                return this.canViewField;
            }
            set {
                this.canViewField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool canViewSpecified {
            get {
                return this.canViewFieldSpecified;
            }
            set {
                this.canViewFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string createTime {
            get {
                return this.createTimeField;
            }
            set {
                this.createTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string creatorId {
            get {
                return this.creatorIdField;
            }
            set {
                this.creatorIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string creatorName {
            get {
                return this.creatorNameField;
            }
            set {
                this.creatorNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string currentNodeId {
            get {
                return this.currentNodeIdField;
            }
            set {
                this.currentNodeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string currentNodeName {
            get {
                return this.currentNodeNameField;
            }
            set {
                this.currentNodeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string forwardButtonName {
            get {
                return this.forwardButtonNameField;
            }
            set {
                this.forwardButtonNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string isnextflow {
            get {
                return this.isnextflowField;
            }
            set {
                this.isnextflowField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string lastOperateTime {
            get {
                return this.lastOperateTimeField;
            }
            set {
                this.lastOperateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string lastOperatorName {
            get {
                return this.lastOperatorNameField;
            }
            set {
                this.lastOperatorNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string messageType {
            get {
                return this.messageTypeField;
            }
            set {
                this.messageTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool mustInputRemark {
            get {
                return this.mustInputRemarkField;
            }
            set {
                this.mustInputRemarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mustInputRemarkSpecified {
            get {
                return this.mustInputRemarkFieldSpecified;
            }
            set {
                this.mustInputRemarkFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool needAffirmance {
            get {
                return this.needAffirmanceField;
            }
            set {
                this.needAffirmanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool needAffirmanceSpecified {
            get {
                return this.needAffirmanceFieldSpecified;
            }
            set {
                this.needAffirmanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string receiveTime {
            get {
                return this.receiveTimeField;
            }
            set {
                this.receiveTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string rejectButtonName {
            get {
                return this.rejectButtonNameField;
            }
            set {
                this.rejectButtonNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string requestId {
            get {
                return this.requestIdField;
            }
            set {
                this.requestIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string requestLevel {
            get {
                return this.requestLevelField;
            }
            set {
                this.requestLevelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string requestName {
            get {
                return this.requestNameField;
            }
            set {
                this.requestNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string subbackButtonName {
            get {
                return this.subbackButtonNameField;
            }
            set {
                this.subbackButtonNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string submitButtonName {
            get {
                return this.submitButtonNameField;
            }
            set {
                this.submitButtonNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string subnobackButtonName {
            get {
                return this.subnobackButtonNameField;
            }
            set {
                this.subnobackButtonNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public WorkflowBaseInfo workflowBaseInfo {
            get {
                return this.workflowBaseInfoField;
            }
            set {
                this.workflowBaseInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public WorkflowDetailTableInfo[] workflowDetailTableInfos {
            get {
                return this.workflowDetailTableInfosField;
            }
            set {
                this.workflowDetailTableInfosField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="webservices.services.weaver.com.cn")]
        public string[] workflowHtmlShow {
            get {
                return this.workflowHtmlShowField;
            }
            set {
                this.workflowHtmlShowField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="webservices.services.weaver.com.cn")]
        public string[] workflowHtmlTemplete {
            get {
                return this.workflowHtmlTempleteField;
            }
            set {
                this.workflowHtmlTempleteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public WorkflowMainTableInfo workflowMainTableInfo {
            get {
                return this.workflowMainTableInfoField;
            }
            set {
                this.workflowMainTableInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString", Namespace="webservices.services.weaver.com.cn")]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="webservices.services.weaver.com.cn", NestingLevel=1)]
        public string[][] workflowPhrases {
            get {
                return this.workflowPhrasesField;
            }
            set {
                this.workflowPhrasesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public WorkflowRequestLog[] workflowRequestLogs {
            get {
                return this.workflowRequestLogsField;
            }
            set {
                this.workflowRequestLogsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.workflow.weaver")]
    public partial class WorkflowBaseInfo {
        
        private string workflowIdField;
        
        private string workflowNameField;
        
        private string workflowTypeIdField;
        
        private string workflowTypeNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string workflowId {
            get {
                return this.workflowIdField;
            }
            set {
                this.workflowIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string workflowName {
            get {
                return this.workflowNameField;
            }
            set {
                this.workflowNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string workflowTypeId {
            get {
                return this.workflowTypeIdField;
            }
            set {
                this.workflowTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string workflowTypeName {
            get {
                return this.workflowTypeNameField;
            }
            set {
                this.workflowTypeNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.workflow.weaver")]
    public partial class WorkflowRequestLog {
        
        private string agentorField;
        
        private string agentorDeptField;
        
        private string annexDocHtmlsField;
        
        private string idField;
        
        private string nodeIdField;
        
        private string nodeNameField;
        
        private string operateDateField;
        
        private string operateTimeField;
        
        private string operateTypeField;
        
        private string operatorDeptField;
        
        private string operatorIdField;
        
        private string operatorNameField;
        
        private string operatorSignField;
        
        private string receivedPersonsField;
        
        private string remarkField;
        
        private string remarkSignField;
        
        private string signDocHtmlsField;
        
        private string signWorkFlowHtmlsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string agentor {
            get {
                return this.agentorField;
            }
            set {
                this.agentorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string agentorDept {
            get {
                return this.agentorDeptField;
            }
            set {
                this.agentorDeptField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string annexDocHtmls {
            get {
                return this.annexDocHtmlsField;
            }
            set {
                this.annexDocHtmlsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string nodeId {
            get {
                return this.nodeIdField;
            }
            set {
                this.nodeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string nodeName {
            get {
                return this.nodeNameField;
            }
            set {
                this.nodeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string operateDate {
            get {
                return this.operateDateField;
            }
            set {
                this.operateDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string operateTime {
            get {
                return this.operateTimeField;
            }
            set {
                this.operateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string operateType {
            get {
                return this.operateTypeField;
            }
            set {
                this.operateTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string operatorDept {
            get {
                return this.operatorDeptField;
            }
            set {
                this.operatorDeptField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string operatorId {
            get {
                return this.operatorIdField;
            }
            set {
                this.operatorIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string operatorName {
            get {
                return this.operatorNameField;
            }
            set {
                this.operatorNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string operatorSign {
            get {
                return this.operatorSignField;
            }
            set {
                this.operatorSignField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string receivedPersons {
            get {
                return this.receivedPersonsField;
            }
            set {
                this.receivedPersonsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string remarkSign {
            get {
                return this.remarkSignField;
            }
            set {
                this.remarkSignField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string signDocHtmls {
            get {
                return this.signDocHtmlsField;
            }
            set {
                this.signDocHtmlsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string signWorkFlowHtmls {
            get {
                return this.signWorkFlowHtmlsField;
            }
            set {
                this.signWorkFlowHtmlsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.workflow.weaver")]
    public partial class WorkflowMainTableInfo {
        
        private WorkflowRequestTableRecord[] requestRecordsField;
        
        private string tableDBNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public WorkflowRequestTableRecord[] requestRecords {
            get {
                return this.requestRecordsField;
            }
            set {
                this.requestRecordsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string tableDBName {
            get {
                return this.tableDBNameField;
            }
            set {
                this.tableDBNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.workflow.weaver")]
    public partial class WorkflowRequestTableRecord {
        
        private int recordOrderField;
        
        private bool recordOrderFieldSpecified;
        
        private WorkflowRequestTableField[] workflowRequestTableFieldsField;
        
        /// <remarks/>
        public int recordOrder {
            get {
                return this.recordOrderField;
            }
            set {
                this.recordOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool recordOrderSpecified {
            get {
                return this.recordOrderFieldSpecified;
            }
            set {
                this.recordOrderFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public WorkflowRequestTableField[] workflowRequestTableFields {
            get {
                return this.workflowRequestTableFieldsField;
            }
            set {
                this.workflowRequestTableFieldsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.workflow.weaver")]
    public partial class WorkflowRequestTableField {
        
        private string browserurlField;
        
        private bool editField;
        
        private bool editFieldSpecified;
        
        private string fieldDBTypeField;
        
        private string fieldFormNameField;
        
        private string fieldHtmlTypeField;
        
        private string fieldIdField;
        
        private string fieldNameField;
        
        private int fieldOrderField;
        
        private bool fieldOrderFieldSpecified;
        
        private string fieldShowNameField;
        
        private string fieldShowValueField;
        
        private string fieldTypeField;
        
        private string fieldValueField;
        
        private string filedHtmlShowField;
        
        private bool mandField;
        
        private bool mandFieldSpecified;
        
        private string[] selectnamesField;
        
        private string[] selectvaluesField;
        
        private bool viewField;
        
        private bool viewFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string browserurl {
            get {
                return this.browserurlField;
            }
            set {
                this.browserurlField = value;
            }
        }
        
        /// <remarks/>
        public bool edit {
            get {
                return this.editField;
            }
            set {
                this.editField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool editSpecified {
            get {
                return this.editFieldSpecified;
            }
            set {
                this.editFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fieldDBType {
            get {
                return this.fieldDBTypeField;
            }
            set {
                this.fieldDBTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fieldFormName {
            get {
                return this.fieldFormNameField;
            }
            set {
                this.fieldFormNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fieldHtmlType {
            get {
                return this.fieldHtmlTypeField;
            }
            set {
                this.fieldHtmlTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fieldId {
            get {
                return this.fieldIdField;
            }
            set {
                this.fieldIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fieldName {
            get {
                return this.fieldNameField;
            }
            set {
                this.fieldNameField = value;
            }
        }
        
        /// <remarks/>
        public int fieldOrder {
            get {
                return this.fieldOrderField;
            }
            set {
                this.fieldOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool fieldOrderSpecified {
            get {
                return this.fieldOrderFieldSpecified;
            }
            set {
                this.fieldOrderFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fieldShowName {
            get {
                return this.fieldShowNameField;
            }
            set {
                this.fieldShowNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fieldShowValue {
            get {
                return this.fieldShowValueField;
            }
            set {
                this.fieldShowValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fieldType {
            get {
                return this.fieldTypeField;
            }
            set {
                this.fieldTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fieldValue {
            get {
                return this.fieldValueField;
            }
            set {
                this.fieldValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string filedHtmlShow {
            get {
                return this.filedHtmlShowField;
            }
            set {
                this.filedHtmlShowField = value;
            }
        }
        
        /// <remarks/>
        public bool mand {
            get {
                return this.mandField;
            }
            set {
                this.mandField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mandSpecified {
            get {
                return this.mandFieldSpecified;
            }
            set {
                this.mandFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="webservices.services.weaver.com.cn")]
        public string[] selectnames {
            get {
                return this.selectnamesField;
            }
            set {
                this.selectnamesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="webservices.services.weaver.com.cn")]
        public string[] selectvalues {
            get {
                return this.selectvaluesField;
            }
            set {
                this.selectvaluesField = value;
            }
        }
        
        /// <remarks/>
        public bool view {
            get {
                return this.viewField;
            }
            set {
                this.viewField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool viewSpecified {
            get {
                return this.viewFieldSpecified;
            }
            set {
                this.viewFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.workflow.weaver")]
    public partial class WorkflowDetailTableInfo {
        
        private string tableDBNameField;
        
        private string[] tableFieldNameField;
        
        private string tableTitleField;
        
        private WorkflowRequestTableRecord[] workflowRequestTableRecordsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string tableDBName {
            get {
                return this.tableDBNameField;
            }
            set {
                this.tableDBNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="webservices.services.weaver.com.cn")]
        public string[] tableFieldName {
            get {
                return this.tableFieldNameField;
            }
            set {
                this.tableFieldNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string tableTitle {
            get {
                return this.tableTitleField;
            }
            set {
                this.tableTitleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public WorkflowRequestTableRecord[] workflowRequestTableRecords {
            get {
                return this.workflowRequestTableRecordsField;
            }
            set {
                this.workflowRequestTableRecordsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void deleteRequestCompletedEventHandler(object sender, deleteRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void submitWorkflowRequestCompletedEventHandler(object sender, submitWorkflowRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class submitWorkflowRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal submitWorkflowRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getToDoWorkflowRequestCountCompletedEventHandler(object sender, getToDoWorkflowRequestCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getToDoWorkflowRequestCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getToDoWorkflowRequestCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getUserIdCompletedEventHandler(object sender, getUserIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void doCreateWorkflowRequestCompletedEventHandler(object sender, doCreateWorkflowRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doCreateWorkflowRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doCreateWorkflowRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getCreateWorkflowRequestInfoCompletedEventHandler(object sender, getCreateWorkflowRequestInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCreateWorkflowRequestInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCreateWorkflowRequestInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowRequestInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowRequestInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getAllWorkflowRequestListCompletedEventHandler(object sender, getAllWorkflowRequestListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllWorkflowRequestListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllWorkflowRequestListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowRequestInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowRequestInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getMyWorkflowRequestListCompletedEventHandler(object sender, getMyWorkflowRequestListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMyWorkflowRequestListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMyWorkflowRequestListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowRequestInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowRequestInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getWorkflowRequestCompletedEventHandler(object sender, getWorkflowRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getWorkflowRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getWorkflowRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowRequestInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowRequestInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void forward2WorkflowRequestCompletedEventHandler(object sender, forward2WorkflowRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class forward2WorkflowRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal forward2WorkflowRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getProcessedWorkflowRequestCountCompletedEventHandler(object sender, getProcessedWorkflowRequestCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProcessedWorkflowRequestCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProcessedWorkflowRequestCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getLeaveDaysCompletedEventHandler(object sender, getLeaveDaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLeaveDaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLeaveDaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getWorkflowRequest4splitCompletedEventHandler(object sender, getWorkflowRequest4splitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getWorkflowRequest4splitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getWorkflowRequest4splitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowRequestInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowRequestInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getHendledWorkflowRequestListCompletedEventHandler(object sender, getHendledWorkflowRequestListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHendledWorkflowRequestListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHendledWorkflowRequestListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowRequestInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowRequestInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getCreateWorkflowCountCompletedEventHandler(object sender, getCreateWorkflowCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCreateWorkflowCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCreateWorkflowCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getToDoWorkflowRequestListCompletedEventHandler(object sender, getToDoWorkflowRequestListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getToDoWorkflowRequestListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getToDoWorkflowRequestListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowRequestInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowRequestInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getWorkflowNewFlagCompletedEventHandler(object sender, getWorkflowNewFlagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getWorkflowNewFlagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getWorkflowNewFlagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void givingOpinionsCompletedEventHandler(object sender, givingOpinionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class givingOpinionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal givingOpinionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getCCWorkflowRequestListCompletedEventHandler(object sender, getCCWorkflowRequestListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCCWorkflowRequestListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCCWorkflowRequestListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowRequestInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowRequestInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getCreateWorkflowListCompletedEventHandler(object sender, getCreateWorkflowListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCreateWorkflowListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCreateWorkflowListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowBaseInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowBaseInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getWorkflowRequestLogsCompletedEventHandler(object sender, getWorkflowRequestLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getWorkflowRequestLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getWorkflowRequestLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowRequestLog[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowRequestLog[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getCCWorkflowRequestCountCompletedEventHandler(object sender, getCCWorkflowRequestCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCCWorkflowRequestCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCCWorkflowRequestCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getAllWorkflowRequestCountCompletedEventHandler(object sender, getAllWorkflowRequestCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllWorkflowRequestCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllWorkflowRequestCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getMyWorkflowRequestCountCompletedEventHandler(object sender, getMyWorkflowRequestCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMyWorkflowRequestCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMyWorkflowRequestCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getProcessedWorkflowRequestListCompletedEventHandler(object sender, getProcessedWorkflowRequestListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProcessedWorkflowRequestListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProcessedWorkflowRequestListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowRequestInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowRequestInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void doForceOverCompletedEventHandler(object sender, doForceOverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doForceOverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doForceOverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getCreateWorkflowTypeCountCompletedEventHandler(object sender, getCreateWorkflowTypeCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCreateWorkflowTypeCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCreateWorkflowTypeCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void forwardWorkflowRequestCompletedEventHandler(object sender, forwardWorkflowRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class forwardWorkflowRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal forwardWorkflowRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void writeWorkflowReadFlagCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getHendledWorkflowRequestCountCompletedEventHandler(object sender, getHendledWorkflowRequestCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHendledWorkflowRequestCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHendledWorkflowRequestCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void getCreateWorkflowTypeListCompletedEventHandler(object sender, getCreateWorkflowTypeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCreateWorkflowTypeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCreateWorkflowTypeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WorkflowBaseInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WorkflowBaseInfo[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591